import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '@/context/CartContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { toast } from "sonner";
import { processPayment, validateCouponCode, sendPaymentNotification, PaymentDetails } from '@/services/paymentService';
import { motion } from 'framer-motion';
import { ShoppingBag, CreditCard, Truck, Phone, MapPin, User, Tag, X } from 'lucide-react';
import esewaQR from '@/assets/esewa-qr.jpg';
import { savePaymentMessageToFirebase } from '@/services/firebaseService';

interface CheckoutFormData {
  customerName: string;
  phone: string;
  address: string;
  paymentMethod: 'esewa' | 'cod';
  couponCode: string;
}

const SimpleCheckout: React.FC = () => {
  const navigate = useNavigate();
  const { items, totalPrice, clearCart } = useCart();
  const [formData, setFormData] = useState<CheckoutFormData>({
    customerName: '',
    phone: '',
    address: '',
    paymentMethod: 'esewa',
    couponCode: ''
  });
  const [couponApplied, setCouponApplied] = useState<{valid: boolean; discount: number; description: string} | null>(null);
  const [processing, setProcessing] = useState(false);
  const [showPaymentInstructions, setShowPaymentInstructions] = useState(false);
  const [currentOrderId, setCurrentOrderId] = useState<string>('');
  const [currentOrderNumber, setCurrentOrderNumber] = useState<string>('');
  const [paymentMessage, setPaymentMessage] = useState('');

  if (items.length === 0) {
    return (
      <div className="min-h-screen pt-24 px-4">
        <div className="max-w-2xl mx-auto text-center">
          <ShoppingBag className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
          <h1 className="text-2xl font-bold mb-2">Your cart is empty</h1>
          <p className="text-muted-foreground mb-4">Add some items to your cart before checkout.</p>
          <Button onClick={() => navigate('/shop')}>Continue Shopping</Button>
        </div>
      </div>
    );
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleApplyCoupon = () => {
    if (!formData.couponCode.trim()) {
      toast.error("Please enter a coupon code");
      return;
    }

    const validation = validateCouponCode(formData.couponCode);
    if (validation.valid) {
      setCouponApplied(validation);
      toast.success(`Coupon applied! ${validation.description}`);
    } else {
      toast.error("Invalid coupon code");
      setCouponApplied(null);
    }
  };

  const handleRemoveCoupon = () => {
    setCouponApplied(null);
    setFormData(prev => ({ ...prev, couponCode: '' }));
    toast.info("Coupon removed");
  };

  const calculateDiscount = () => {
    if (!couponApplied) return 0;
    return Math.round((totalPrice * couponApplied.discount) / 100);
  };

  const getFinalTotal = () => {
    return totalPrice - calculateDiscount();
  };

  const handlePlaceOrder = async () => {
    if (!formData.customerName.trim() || !formData.phone.trim() || !formData.address.trim()) {
      toast.error("Please fill in all required fields");
      return;
    }

    setProcessing(true);

    try {
      const paymentDetails: PaymentDetails = {
        customerName: formData.customerName,
        phone: formData.phone,
        address: formData.address,
        amount: getFinalTotal(),
        orderId: '', // Will be generated by the service
        products: items.map(item => ({
          id: item.product.id,
          name: item.product.name,
          price: item.product.price,
          quantity: item.quantity,
          image: item.product.image
        })),
        paymentMethod: formData.paymentMethod,
        couponCode: couponApplied ? formData.couponCode : undefined,
        discountAmount: calculateDiscount()
      };

      const result = await processPayment(paymentDetails);

      if (result.success) {
        setCurrentOrderId(result.orderId || '');
        setCurrentOrderNumber(result.orderNumber || '');
        
        if (formData.paymentMethod === 'esewa') {
          setShowPaymentInstructions(true);
        } else {
          clearCart();
          toast.success("Order placed successfully!");
          navigate('/order-success', { 
            state: { 
              orderNumber: result.orderNumber,
              paymentMethod: 'cod',
              total: getFinalTotal(),
              customerName: formData.customerName,
              orderId: result.orderId
            }
          });
        }
      } else {
        toast.error(result.message);
      }
    } catch (error) {
      console.error('Checkout error:', error);
      toast.error("Something went wrong. Please try again.");
    } finally {
      setProcessing(false);
    }
  };

  const handleSendPaymentScreenshot = async () => {
    if (!paymentMessage.trim()) {
      toast.error("Please enter your payment details or attach screenshot");
      return;
    }

    // Save to Firebase for real-time notifications
    await savePaymentMessageToFirebase({
      customerName: formData.customerName,
      orderId: currentOrderId,
      message: paymentMessage
    });
    
    const success = await sendPaymentNotification(
      currentOrderId,
      formData.customerName,
      paymentMessage
    );

    if (success) {
      clearCart();
      navigate('/order-success', { 
        state: { 
          orderNumber: currentOrderNumber,
          paymentMethod: 'esewa',
          total: getFinalTotal(),
          customerName: formData.customerName,
          orderId: currentOrderId
        }
      });
    }
  };

  if (showPaymentInstructions) {
    return (
      <div className="min-h-screen pt-24 px-4">
        <div className="max-w-2xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <Card>
              <CardHeader className="text-center">
                <CardTitle className="text-2xl text-green-600">Order Created Successfully!</CardTitle>
                <p className="text-lg font-semibold">Order #{currentOrderNumber}</p>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center">
                  <h3 className="text-xl font-semibold mb-4">Complete Your eSewa Payment</h3>
                  <div className="bg-blue-50 p-4 rounded-lg mb-4">
                    <p className="font-semibold mb-2">eSewa ID: 9766358751</p>
                    <p className="text-sm text-muted-foreground">Amount to pay: Rs. {getFinalTotal()}</p>
                  </div>
                </div>

                <div className="text-center">
                  <h4 className="font-semibold mb-2">Scan QR Code to Pay:</h4>
                  <div className="flex justify-center mb-4">
                    <img 
                      src={esewaQR} 
                      alt="eSewa QR Code" 
                      className="w-48 h-48 border rounded-lg"
                    />
                  </div>
                </div>

                <div className="bg-yellow-50 p-4 rounded-lg">
                  <h4 className="font-semibold mb-2">Payment Process:</h4>
                  <ol className="list-decimal list-inside space-y-1 text-sm">
                    <li>Pay Rs. {getFinalTotal()} to eSewa ID: 9766358751</li>
                    <li>Take a screenshot of your payment confirmation</li>
                    <li>Send the screenshot using the form below</li>
                    <li>We will verify your payment and deliver within 24 hours</li>
                  </ol>
                </div>

                <div className="space-y-4">
                  <Label htmlFor="paymentMessage">Payment Screenshot or Details</Label>
                  <textarea
                    id="paymentMessage"
                    value={paymentMessage}
                    onChange={(e) => setPaymentMessage(e.target.value)}
                    placeholder="Describe your payment or mention screenshot details..."
                    className="w-full min-h-[100px] p-3 border border-border rounded-md resize-none"
                  />
                  <Button 
                    onClick={handleSendPaymentScreenshot}
                    className="w-full"
                  >
                    Send Payment Confirmation
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-24 px-4">
      <div className="max-w-6xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-8"
        >
          {/* Checkout Form */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5" />
                  Customer Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="customerName">Full Name *</Label>
                  <Input
                    id="customerName"
                    name="customerName"
                    value={formData.customerName}
                    onChange={handleInputChange}
                    placeholder="Enter your full name"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="phone">Phone Number *</Label>
                  <Input
                    id="phone"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    placeholder="Enter your phone number"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="address">Address *</Label>
                  <textarea
                    id="address"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    placeholder="Enter your complete address"
                    className="w-full min-h-[80px] p-3 border border-border rounded-md resize-none"
                    required
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CreditCard className="w-5 h-5" />
                  Payment Method
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <label className="flex items-center space-x-3 cursor-pointer">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="esewa"
                      checked={formData.paymentMethod === 'esewa'}
                      onChange={handleInputChange}
                      className="w-4 h-4"
                    />
                    <div>
                      <span className="font-semibold">Manual eSewa Payment</span>
                      <div className="text-sm text-green-600 font-medium">✓ Recommended</div>
                    </div>
                  </label>
                  <label className="flex items-center space-x-3 cursor-pointer">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="cod"
                      checked={formData.paymentMethod === 'cod'}
                      onChange={handleInputChange}
                      className="w-4 h-4"
                    />
                    <div>
                      <span className="font-semibold">Cash on Delivery</span>
                      <div className="text-sm text-orange-600">Limited areas only</div>
                    </div>
                  </label>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Tag className="w-5 h-5" />
                  Apply Coupon
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-2">
                  <Input
                    name="couponCode"
                    value={formData.couponCode}
                    onChange={handleInputChange}
                    placeholder="Enter coupon code"
                    disabled={!!couponApplied}
                  />
                  {couponApplied ? (
                    <Button variant="outline" onClick={handleRemoveCoupon}>
                      <X className="w-4 h-4" />
                    </Button>
                  ) : (
                    <Button onClick={handleApplyCoupon}>Apply</Button>
                  )}
                </div>
                {couponApplied && (
                  <div className="bg-green-50 p-3 rounded-lg">
                    <p className="text-green-700 font-medium">
                      ✓ {couponApplied.description} applied!
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Order Summary */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ShoppingBag className="w-5 h-5" />
                  Order Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {items.map((item) => (
                  <div key={item.product.id} className="flex items-center gap-4">
                    <img 
                      src={item.product.image} 
                      alt={item.product.name}
                      className="w-16 h-16 object-cover rounded-lg"
                    />
                    <div className="flex-1">
                      <h4 className="font-semibold">{item.product.name}</h4>
                      <p className="text-sm text-muted-foreground">
                        Qty: {item.quantity} × Rs. {item.product.price}
                      </p>
                    </div>
                    <div className="font-semibold">
                      Rs. {item.product.price * item.quantity}
                    </div>
                  </div>
                ))}
                
                <Separator />
                
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Subtotal:</span>
                    <span>Rs. {totalPrice}</span>
                  </div>
                  {couponApplied && (
                    <div className="flex justify-between text-green-600">
                      <span>Discount ({couponApplied.description}):</span>
                      <span>-Rs. {calculateDiscount()}</span>
                    </div>
                  )}
                  <Separator />
                  <div className="flex justify-between text-lg font-bold">
                    <span>Total:</span>
                    <span>Rs. {getFinalTotal()}</span>
                  </div>
                </div>

                <Button 
                  onClick={handlePlaceOrder}
                  disabled={processing}
                  className="w-full"
                >
                  {processing ? 'Processing...' : 'Place Order'}
                </Button>
              </CardContent>
            </Card>

            {/* Trust Badges */}
            <div className="grid grid-cols-3 gap-4 text-center">
              <div className="flex flex-col items-center gap-2">
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                  <CreditCard className="w-6 h-6 text-green-600" />
                </div>
                <span className="text-sm font-medium">Secure Payment</span>
              </div>
              <div className="flex flex-col items-center gap-2">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                  <Truck className="w-6 h-6 text-blue-600" />
                </div>
                <span className="text-sm font-medium">24hr Delivery</span>
              </div>
              <div className="flex flex-col items-center gap-2">
                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                  <Phone className="w-6 h-6 text-purple-600" />
                </div>
                <span className="text-sm font-medium">Support 24/7</span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default SimpleCheckout;